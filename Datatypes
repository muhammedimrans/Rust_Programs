Rust Program Explanation
This document explains each line of a simple Rust program used to demonstrate core Rust syntax, types, and operations.

🔧 Program Entry and Attributes
rust
Copy
Edit
#![allow(unused_variables)]
fn main() {
#![allow(unused_variables)]: Tells the Rust compiler to suppress warnings about unused variables.

fn main(): The entry point of every Rust program.

📜 String Printing & Escape Characters
rust
Copy
Edit
println!("Dear Emily,\nHow have you been?");
\n adds a newline.

rust
Copy
Edit
println!("\tOnce upon a time");
\t adds a tab space.

rust
Copy
Edit
println!("Juliet said \"I love you Romeo\"");
\" allows quotes inside strings.

rust
Copy
Edit
let filepath: &str = "C:\\My Documents\\new\\videos";
println!("{filepath}");
Double backslashes \\ are used to escape backslashes in paths.

"{filepath}" uses Rust 1.58+ inline formatting.

🔢 Numbers and Math
rust
Copy
Edit
let value: i32 = -15;
println!("value is {}", value.abs());
abs() returns the absolute value of a number.

rust
Copy
Edit
println!("{}", value.pow(4));
Raises the number to the 4th power.

✂️ Whitespace Handling
rust
Copy
Edit
let white_space: &str = "      white comment     ";
println!("White space is {}", white_space.trim());
trim() removes leading and trailing spaces.

🔍 Floating Point Operations
rust
Copy
Edit
let pi: f64 = 3.141567634256473;
println!("pi floor value is {}", pi.floor());
println!("pi ceil value is {}", pi.ceil());
println!("pi round value is {}", pi.round());
println!("The pi value is {pi:.4}");
println!("The pi value is {:.7}", pi);
floor() → largest integer ≤ value

ceil() → smallest integer ≥ value

round() → rounds to nearest integer

Formatting pi to fixed decimal places.

🔁 Type Casting
rust
Copy
Edit
let miles_away: i32 = 18;
let miles_away_i8 = miles_away as i8;
println!("{}", miles_away_i8);
as keyword is used to cast types (e.g., i32 to i8).

➕➖ Arithmetic Operators
rust
Copy
Edit
let addition = 5 + 4;
let subtraction = 10 - 6;
let multiplication = 3 * 4;
let floor_division = 5 / 3;
let decimal_division = 5.0 / 3.0;
let remainder = 9 % 2;
/ → integer division if both operands are integers

% → modulus (remainder)

Floating point division requires at least one float operand.

🔎 Boolean Logic
rust
Copy
Edit
let age = 18;
let is_young = age < 15;
println!("{}", is_young);
Basic comparison returns a bool.

rust
Copy
Edit
println!("{}", age.is_positive());
println!("{}", age.is_negative());
Check if a number is positive or negative.

rust
Copy
Edit
println!("{}", true);
println!("{}", !true);
println!("{}", "coke" == "Coke");
println!("{}", "coke" != "Coke");
Demonstrates boolean values and logical negation.

String comparison is case-sensitive.

rust
Copy
Edit
let purchased_ticket = true;
let plane_on_ticket = true;
let making_event = purchased_ticket && plane_on_ticket;
&& → logical AND

|| → logical OR

! → logical NOT

🔤 Characters
rust
Copy
Edit
let first_initial: char = 'B';
let second: char = '🥶';
char can store Unicode values including emojis.

rust
Copy
Edit
println!("{}", first_initial.is_alphabetic());
println!("{}", first_initial.is_uppercase());
Character property checks (alphabetic, case, etc.)

📚 Arrays
rust
Copy
Edit
let numbers = [1,2,3,4,5,6,7,8,9];
let mut apples = ["Machintose", "Garunda", "Alphabine"];
apples[2] = "Autumn";
Arrays are fixed-size, homogenous collections.

Can be mutable (mut) and indexed.

rust
Copy
Edit
println!("{:?}", numbers);
println!("{:#?}", apples);
println!("{}", apples.len());
dbg!(2 + 2);
:? and #? are used for debug-style printing.

dbg!() is for quick debugging with extra context.

🧩 Tuples
rust
Copy
Edit
let employee = ("Sudarshan", 35, true, 25.42);
let (name, age, is_male, money) = employee;
Tuples store values of different types.

You can access them by index or destructuring.

rust
Copy
Edit
println!("Name is {name} age is {age} and is_male {is_male}");
println!("{employee:#?}");
🔁 Ranges & Loops
rust
Copy
Edit
let month_days = 1..31;
1..31 is a range from 1 to 30 (exclusive).

rust
Copy
Edit
for number in month_days {
    print!("{number}");
}
Loop through the range using for.

rust
Copy
Edit
let letters = 'b'..'q';
for characters in letters {
    print!("{characters:# }");
}
Loop through a range of characters ('b' to 'p').

✅ Summary
This program is a practical walkthrough of:

Basic I/O

Variables & Types

Arithmetic & Logic

Strings, Characters

Arrays & Tuples

Ranges & Loops

Formatting, Debugging, and Type Casting
